scale_shape_manual("",
values = plots$global$total.e$pt.shapes, # Shapes of points
labels = plots$global$total.e$labels)+ # Legend labels
scale_x_continuous(expand = c(0, 0),
limits = plots$h2o$x.axis$total.e$lims, # Axis length limits
breaks = plots$h2o$x.axis$total.e$breaks, # Axis break positions
labels = plots$h2o$x.axis$total.e$labels)+ # Axis value labels
scale_y_continuous(expand = c(0, 0),
limits = plots$y.axis$avers$lims, # Axis length limits
breaks = plots$y.axis$avers$breaks, # Axis break positions
labels = plots$y.axis$avers$labels)+ # Axis value labels
theme_classic()+
theme(# Text
strip.text.x = plots$global$strip.text.x, # Modify label text for facets
axis.title = plots$global$axis.title, # Modify axis title text
axis.text = plots$global$axis.text, # Modify axis value text
legend.title = plots$global$legend.title, # Modify legend title text (!) Probably Uneccessary
legend.text = plots$global$legend.text, # Modify legend value text
plot.tag = plots$global$plot.tag, # Modify the plot tag (e.g. "A.") text
plot.title = plots$global$plot.title,
# Positioning
axis.title.x = plots$global$axis.title.x, # Modify X axis appearance
axis.title.y = plots$global$axis.title.y, # Modify Y axis appearance
plot.tag.position = plots$global$total.e$plot.tag.position, # Modify position of plot tag
legend.position = plots$global$total.e$legend.position, # Modify position of legend
# Other Aesthetics
axis.line = plots$global$axis.line, # Modify axis line attributes
axis.ticks = plots$global$axis.ticks, # Modify axis tick mark attributes
axis.ticks.length = plots$global$axis.ticks.length, # Modify how long each tick is
legend.key.size = plots$global$legend.key.size, # Modify the size of the legend key boxes
strip.background = element_rect(colour="white"), # Gets rid of default background
panel.spacing = plots$global$panel.spacing
)+
xlab("Total Ethanol Consumed (g/kg)")+
ylab("Aversive Responses (+/-SEM)")+
ggtitle("Water Trial")
plots$h2o$avers$total.e$ggp
View(plots[["h2o"]][["avers"]][["total.e"]][["fx"]])
# Add trial values
plots$h2o$avers$total.e$fx$trial <- rep(c("Trial 1", "Trial 2"), 4)
plots$h2o$avers$total.e$fx
#### Total Ethanol ####
# Pull the effects from model & calculate confidence intervals for graphing
plots$h2o$avers$total.e$fx <- Effect(c("Substance", "Age", "c.totale"),
models$h2o$avers$total.e,
se = list(level =.68), # se is std err and the level is the confidence level. .68 = actual std err for conf int. lower and upper.
xlevels = list(c.totale = 20))# the xlevels command is used to increase the number of points calculated for total ethanol (default = 5)
# Convert effect object to data frame
plots$h2o$avers$total.e$fx <- as.data.frame(plots$h2o$avers$total.e$fx)
# Get original totale values (un-center the variable)
plots$h2o$avers$total.e$fx$totale <- (plots$h2o$avers$total.e$fx$c.totale + mean(data$h2o$no.ctrl$TOTAL.ETOH.Swap.Consumed..g.kg.))
# Add trial values
plots$h2o$avers$total.e$fx$trial <- rep(c("Trial 1", "Trial 2"), 80)
debugSource("C:/Users/kieri/Documents/ABHV/graph_setup.R", echo=TRUE)
#### Total Ethanol ####
# Pull the effects from model & calculate confidence intervals for graphing
plots$h2o$hedon$total.e$fx <- Effect(c("Substance", "Age", "c.totale"),
models$h2o$hedon$total.e,
se = list(level =.68), # se is std err and the level is the confidence level. .68 = actual std err for conf int. lower and upper.
xlevels = list(c.totale = 20))# the xlevels command is used to increase the number of points calculated for total ethanol (default = 5)
# Convert effect object to data frame
plots$h2o$hedon$total.e$fx <- as.data.frame(plots$h2o$hedon$total.e$fx)
# Get original totale values (un-center the variable)
plots$h2o$hedon$total.e$fx$totale <- (plots$h2o$hedon$total.e$fx$c.totale + mean(data$h2o$no.ctrl$TOTAL.ETOH.Swap.Consumed..g.kg.))
# Add trial values
plots$h2o$hedon$total.e$fx$trial <- rep(c("Trial 1", "Trial 2"), 80)
#### Total Ethanol ####
# Pull the effects from model & calculate confidence intervals for graphing
plots$h2o$hedon$total.e$fx <- Effect(c("Substance", "Age", "c.totale"),
models$h2o$hedon$total.e,
se = list(level =.68), # se is std err and the level is the confidence level. .68 = actual std err for conf int. lower and upper.
xlevels = list(c.totale = 20))# the xlevels command is used to increase the number of points calculated for total ethanol (default = 5)
# Convert effect object to data frame
plots$h2o$hedon$total.e$fx <- as.data.frame(plots$h2o$hedon$total.e$fx)
# Get original totale values (un-center the variable)
plots$h2o$hedon$total.e$fx$totale <- (plots$h2o$hedon$total.e$fx$c.totale + mean(data$h2o$no.ctrl$TOTAL.ETOH.Swap.Consumed..g.kg.))
# Add trial values
plots$h2o$hedon$total.e$fx$trial <- rep(c("Trial 1", "Trial 2"), 40)
plots$h2o$hedon$total.e$fx
#### Total Ethanol ####
# Pull the effects from model & calculate confidence intervals for graphing
plots$h2o$avers$total.e$fx <- Effect(c("Substance", "Age", "c.totale"),
models$h2o$avers$total.e,
se = list(level =.68), # se is std err and the level is the confidence level. .68 = actual std err for conf int. lower and upper.
xlevels = list(c.totale = 20))# the xlevels command is used to increase the number of points calculated for total ethanol (default = 5)
# Convert effect object to data frame
plots$h2o$avers$total.e$fx <- as.data.frame(plots$h2o$avers$total.e$fx)
# Get original totale values (un-center the variable)
plots$h2o$avers$total.e$fx$totale <- (plots$h2o$avers$total.e$fx$c.totale + mean(data$h2o$no.ctrl$TOTAL.ETOH.Swap.Consumed..g.kg.))
# Add trial values
plots$h2o$avers$total.e$fx$trial <- rep(c("Trial 1", "Trial 2"), 40)
plots$h2o$avers$total.e$fx
# Start ggplot
plots$h2o$avers$total.e$ggp <- ggplot(plots$h2o$avers$total.e$fx,
aes(totale,
fit,
group = Age,
col = Age,
fill = Age,
shape = Age))+
# Add Prediction Line to graph
geom_smooth(data = plots$h2o$avers$total.e$fx,
se = FALSE, # Don't show Std. Error, we have error ribbons for that
method = "glm", # Generalized linear model
method.args = list(family = "poisson"), # Poisson link function
linewidth = plots$global$linewidth)+ # Width of trend lines
# Add Error Ribbon to graph
geom_ribbon(data = plots$h2o$avers$total.e$fx,
aes(ymin = lower, ymax = upper),
colour = plots$global$rib.edge.color, # colour = NA suppresses edges of the ribbon
alpha = plots$global$rib.alpha)+ # Opacity at 25% (75% Transparent)
facet_grid(.~ trial)+ # Makes the plot multi-panel. One for each level of trial
# Add Raw Data to graph
geom_point(data = data$h2o$no.ctrl,
aes(x = TOTAL.ETOH.Swap.Consumed..g.kg.,
y = Total.Aversive),
size = plots$global$pt.size,
alpha = plots$global$pt.alpha)+
labs(tag="B.")+ # Add image tag for final image combo.
scale_color_manual("",
values = plots$global$total.e$colors, # Line and Point color
labels = plots$global$total.e$labels)+ # Labels for legend
scale_fill_manual("",
values = plots$global$total.e$rib.color, # Ribbon color
labels = plots$global$total.e$labels)+ # Legend labels
scale_linetype_manual("",
values = plots$global$total.e$line.types, # Types of lines
labels = plots$global$total.e$labels)+ # Legend labels
scale_shape_manual("",
values = plots$global$total.e$pt.shapes, # Shapes of points
labels = plots$global$total.e$labels)+ # Legend labels
scale_x_continuous(expand = c(0, 0),
limits = plots$h2o$x.axis$total.e$lims, # Axis length limits
breaks = plots$h2o$x.axis$total.e$breaks, # Axis break positions
labels = plots$h2o$x.axis$total.e$labels)+ # Axis value labels
scale_y_continuous(expand = c(0, 0),
limits = plots$y.axis$avers$lims, # Axis length limits
breaks = plots$y.axis$avers$breaks, # Axis break positions
labels = plots$y.axis$avers$labels)+ # Axis value labels
theme_classic()+
theme(# Text
strip.text.x = plots$global$strip.text.x, # Modify label text for facets
axis.title = plots$global$axis.title, # Modify axis title text
axis.text = plots$global$axis.text, # Modify axis value text
legend.title = plots$global$legend.title, # Modify legend title text (!) Probably Uneccessary
legend.text = plots$global$legend.text, # Modify legend value text
plot.tag = plots$global$plot.tag, # Modify the plot tag (e.g. "A.") text
plot.title = plots$global$plot.title,
# Positioning
axis.title.x = plots$global$axis.title.x, # Modify X axis appearance
axis.title.y = plots$global$axis.title.y, # Modify Y axis appearance
plot.tag.position = plots$global$total.e$plot.tag.position, # Modify position of plot tag
legend.position = plots$global$total.e$legend.position, # Modify position of legend
# Other Aesthetics
axis.line = plots$global$axis.line, # Modify axis line attributes
axis.ticks = plots$global$axis.ticks, # Modify axis tick mark attributes
axis.ticks.length = plots$global$axis.ticks.length, # Modify how long each tick is
legend.key.size = plots$global$legend.key.size, # Modify the size of the legend key boxes
strip.background = element_rect(colour="white"), # Gets rid of default background
panel.spacing = plots$global$panel.spacing
)+
xlab("Total Ethanol Consumed (g/kg)")+
ylab("Aversive Responses (+/-SEM)")+
ggtitle("Water Trial")
plots$h2o$avers$total.e$ggp
# Save the plot
ggsave("Fig 16B Water Aversive Total Ethanol Graph.png",
plots$h2o$avers$total.e$ggp,
width = 1067,
height = 600,
units = "px",
dpi = 81)
# Combine the two individual ggplots into one larger multipanel ggplot
plots$h2o$avers$combo.ggp <- plots$h2o$avers$overall$ggp +
plots$h2o$avers$total.e$ggp +
plot_layout(ncol = 2, widths = c(1, 2)) # Layout 2 columns with 1/3 for first col 2/3s for second plot.
plots$h2o$avers$combo.ggp
# Save the plot
ggsave("Fig 16A&B Water Aversive Fits.png",
plots$h2o$avers$combo.ggp,
width = 1600,
height = 600,
units = "px",
dpi = 96)
# HEDONIC ####
## Overall ####
# Start ggplot
plots$h2o$hedon$overall$ggp <- ggplot(plots$h2o$hedon$overall$fx,
aes(trial, fit,
group = interaction(Age, Condition),
col = interaction(Age, Condition),
fill = interaction(Age, Condition),
linetype = interaction(Age, Condition),
shape = interaction(Age, Condition)))+
# Add Raw Data to graph
geom_point(data = plots$h2o$hedon$overall$fx,
size = plots$global$pt.size,
alpha = plots$global$pt.alpha)+
# Add Prediction Line to graph
geom_line(data = plots$h2o$hedon$overall$fx,
linewidth = plots$global$linewidth)+ # Width of trend lines
# Add Error Ribbon to Graph
geom_errorbar(data = plots$h2o$hedon$overall$fx,
aes(ymin = lower, ymax = upper),
width = plots$global$err.bar.width,
linewidth = plots$global$linewidth,
linetype = "solid" # These should always be 'solid'.
)+
labs(tag = "A.")+ # Add image tag for multipanel final image
scale_color_manual("",
values = plots$global$overall$colors, # Line and Point color
labels = plots$global$overall$labels)+ # Labels for legend
scale_fill_manual("",
values = plots$global$overall$rib.color, # Ribbon color
labels = plots$global$overall$labels)+ # Legend labels
scale_linetype_manual("",
values = plots$global$overall$line.types, # Types of lines
labels = plots$global$overall$labels)+ # Legend labels
scale_shape_manual("",
values = plots$global$overall$pt.shapes, # Shapes of points
labels = plots$global$overall$labels)+ # Legend labels
scale_y_continuous(expand = c(0, 0),
limits = plots$y.axis$hedon$lims, # Axis length limits
breaks = plots$y.axis$hedon$breaks, # Axis break positions
labels = plots$y.axis$hedon$labels)+ # Axis value labels
theme_classic()+
theme(# Text
strip.text.x = plots$global$strip.text.x, # Modify label text for facets
axis.title = plots$global$axis.title, # Modify axis title text
axis.text = plots$global$axis.text, # Modify axis value text
legend.title = plots$global$legend.title, # Modify legend title text (!) Probably Uneccessary
legend.text = plots$global$legend.text, # Modify legend value text
plot.tag = plots$global$plot.tag, # Modify the plot tag (e.g. "A.") text
# Positioning
axis.title.x = plots$global$axis.title.x, # Modify X axis appearance
axis.title.y = plots$global$axis.title.y, # Modify Y axis appearance
plot.tag.position = plots$global$overall$plot.tag.position, # Modify position of plot tag
legend.position = plots$global$overall$legend.position, # Modify position of legend
# Other Aesthetics
axis.line = plots$global$axis.line, # Modify axis line attributes
axis.ticks = plots$global$axis.ticks, # Modify axis tick mark attributes
axis.ticks.length = plots$global$axis.ticks.length, # Modify how long each tick is
legend.key.size = plots$global$legend.key.size, # Modify the size of the legend key boxes
strip.background = element_rect(colour="white") # Gets rid of default background
)+
xlab("Water Trial")+ # X axis label
ylab("Hedonic Responses (+/-SEM)") # Y axis label
plots$h2o$hedon$overall$ggp
# Save the plot
ggsave("Fig 14A Water Hedonic Graph.png",
plots$h2o$hedon$overall$ggp,
width = 533,
height = 600,
units = "px",
dpi = 81)
## Total Ethanol ####
# Start ggplot
plots$h2o$hedon$total.e$ggp <- ggplot(plots$h2o$hedon$total.e$fx,
aes(totale,
fit,
group = Age,
col = Age,
fill = Age,
shape = Age))+
# Add Prediction Line to graph
geom_smooth(data = plots$h2o$hedon$total.e$fx,
se = FALSE, # Don't show Std. Error, we have error ribbons for that
method = "glm", # Generalized linear model
method.args = list(family = "poisson"), # Poisson link function
linewidth = plots$global$linewidth)+ # Width of trend lines
# Add Error Ribbon to graph
geom_ribbon(data = plots$h2o$hedon$total.e$fx,
aes(ymin = lower, ymax = upper),
colour = plots$global$rib.edge.color, # colour = NA suppresses edges of the ribbon
alpha = plots$global$rib.alpha)+ # Opacity at 25% (75% Transparent)
facet_grid(.~ trial)+ # Makes the plot multi-panel. One for each level of trial
# Add Raw Data to graph
geom_point(data = data$h2o$no.ctrl,
aes(x = TOTAL.ETOH.Swap.Consumed..g.kg.,
y = Total.Hedonic...MM.),
size = plots$global$pt.size,
alpha = plots$global$pt.alpha)+
labs(tag="B.")+ # Add image tag for final image combo.
scale_color_manual("",
values = plots$global$total.e$colors, # Line and Point color
labels = plots$global$total.e$labels)+ # Labels for legend
scale_fill_manual("",
values = plots$global$total.e$rib.color, # Ribbon color
labels = plots$global$total.e$labels)+ # Legend labels
scale_linetype_manual("",
values = plots$global$total.e$line.types, # Types of lines
labels = plots$global$total.e$labels)+ # Legend labels
scale_shape_manual("",
values = plots$global$total.e$pt.shapes, # Shapes of points
labels = plots$global$total.e$labels)+ # Legend labels
scale_x_continuous(expand = c(0, 0),
limits = plots$h2o$x.axis$total.e$lims, # Axis length limits
breaks = plots$h2o$x.axis$total.e$breaks, # Axis break positions
labels = plots$h2o$x.axis$total.e$labels)+ # Axis value labels
scale_y_continuous(expand = c(0, 0),
limits = plots$y.axis$hedon$lims, # Axis length limits
breaks = plots$y.axis$hedon$breaks, # Axis break positions
labels = plots$y.axis$hedon$labels)+ # Axis value labels
theme_classic()+
theme(# Text
strip.text.x = plots$global$strip.text.x, # Modify label text for facets
axis.title = plots$global$axis.title, # Modify axis title text
axis.text = plots$global$axis.text, # Modify axis value text
legend.title = plots$global$legend.title, # Modify legend title text (!) Probably Uneccessary
legend.text = plots$global$legend.text, # Modify legend value text
plot.tag = plots$global$plot.tag, # Modify the plot tag (e.g. "A.") text
plot.title = plots$global$plot.title,
# Positioning
axis.title.x = plots$global$axis.title.x, # Modify X axis appearance
axis.title.y = plots$global$axis.title.y, # Modify Y axis appearance
plot.tag.position = plots$global$total.e$plot.tag.position, # Modify position of plot tag
legend.position = plots$global$total.e$legend.position, # Modify position of legend
# Other Aesthetics
axis.line = plots$global$axis.line, # Modify axis line attributes
axis.ticks = plots$global$axis.ticks, # Modify axis tick mark attributes
axis.ticks.length = plots$global$axis.ticks.length, # Modify how long each tick is
legend.key.size = plots$global$legend.key.size, # Modify the size of the legend key boxes
strip.background = element_rect(colour="white"), # Gets rid of default background
panel.spacing = plots$global$panel.spacing
)+
xlab("Total Ethanol Consumed (g/kg)")+
ylab("Hedonic Responses (+/-SEM)")+
ggtitle("Water Trial")
plots$h2o$hedon$total.e$ggp
# Save the plot
ggsave("Fig 14B Water Hedonic Total Ethanol Graph.png",
plots$h2o$hedon$total.e$ggp,
width = 1067,
height = 600,
units = "px",
dpi = 81)
# Combine the two individual ggplots into one larger multipanel ggplot
plots$h2o$hedon$combo.ggp <- plots$h2o$hedon$overall$ggp +
plots$h2o$hedon$total.e$ggp +
plot_layout(ncol = 2, widths = c(1, 2)) # Layout 2 columns with 1/3 for first col 2/3s for second plot.
plots$h2o$hedon$combo.ggp
# Save the plot
ggsave("Fig 14A&B Water Hedonic Fits.png",
plots$h2o$hedon$combo.ggp,
width = 1600,
height = 600,
units = "px",
dpi = 96)
# Save Workspace
save.image("ABHV_workspace.RData")
plots[["h2o"]][["hedon"]][["combo.ggp"]]
exp(1)
exp(2)
exp(log(2))
knitr::opts_chunk$set(echo = T,
results = "hide",
error = F,
warning = F,
message = F,
eval = F)
# Set your working directory to your project folder and check that it is correct.
setwd("C:/Users/kieri/Documents/ABHV")
getwd()
View(data)
data$raw <- read.csv("ABHV2018.csv",
na.strings="\"\"", #with blanks/ N/As set to blank ("\"\"")
stringsAsFactors = TRUE) # categorical/character data as "factor"
data$raw$RatID <- as.factor(data$raw$RatID) # Convert RatID to factor type because it is not a numeric variable although it seems like one.
View(models)
View(compars)
View(compars)
View(compars)
View(plots)
# See if rtools is installed. It has necessary C++ compiler for installs of some of the libraries that are required.
if (Sys.which("make") == "") {  # Check to see if "make" command from rtools is found in system's PATH. If an empty string is retuned, rtools isn't installed.
message("Rtools is not found. Please install Rtools from https://cran.r-project.org/bin/windows/Rtools/, restart R, and rerun this code.")
} else { #rtools installed == TRUE
message("Rtools is installed.")
# Load package or install MASS and load if not present
if (!require(MASS)) {
install.packages("MASS")
library(MASS)
}
# Load package or install lattice and load if not present
if (!require(lattice)) {
install.packages("lattice")
library(lattice)
}
# Load package or install boot and load if not present
if (!require(boot)) {
install.packages("boot")
library(boot)
}
# Load package or install car and load if not present
if (!require(car)) {
install.packages("car")
library(car)
}
# Load package or install emmeans and load if not present
if (!require(emmeans)) {
install.packages("emmeans")
library(emmeans)
}
# Load package or install lme4 and load if not present
if (!require(lme4)) {
install.packages("lme4")
library(lme4)
}
# Load package or install zoo and load if not present
if (!require(zoo)) {
install.packages("zoo")
library(zoo)
}
# Load package or install tidyr and load if not present
if (!require(tidyr)) {
install.packages("tidyr")
library(tidyr)
}
# Load package or install ggplot2 and load if not present
if (!require(ggplot2)) {
install.packages("ggplot2")
library(ggplot2)
}
# Load package or install lmerTest and load if not present
if (!require(lmerTest)) {
install.packages("lmerTest")
library(lmerTest)
}
# Load package or install dplyr and load if not present
if (!require(dplyr)) {
install.packages("dplyr")
library(dplyr)
}
# Packages that may be needed, maybe not:
# Load package or install multcomp and load if not present
if (!require(multcomp)) {
install.packages("multcomp")
library(multcomp)
}
# Load package or install foreign and load if not present
if (!require(foreign)) {
install.packages("foreign")
library(foreign)
}
# Load package or install msm and load if not present
if (!require(msm)) {
install.packages("msm")
library(msm)
}
# Load package or install effects and load if not present
if (!require(effects)) {
install.packages("effects")
library(effects)
}
# Load package or install effects and load if not present
if (!require(gridExtra)) {
install.packages("gridExtra")
library(gridExtra)
}
# Load package or install patchwork and load if not present
if (!require(patchwork)) {
install.packages("patchwork")
library(patchwork)
}
glmer()
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
load("C:/Users/kieri/Documents/ABHV/ABHV_workspace.RData")
# Ethanol vs Control (Overall)
## Ethanol Aversives GLMER (with EtOH vs CTRL)####
models$eth$avers$overall <- glmer(Total.Aversive ~ c.conc*Age*Condition # predictors: full factorial fixed effects of centered concentration, age, and condition
+ (c.conc|RatID), # and the random effects of the intercept (RatID) and the slope of concentration
data = data$eth$ctrl,
family = poisson)
# Get a summary of our output
summary(models$eth$avers$overall)
# Ethanol vs Control (Overall)
## Ethanol Aversives GLMER (with EtOH vs CTRL)####
models$eth$avers$overall <- glmer(Total.Aversive ~ c.conc*Age*Condition # predictors: full factorial fixed effects of centered concentration, age, and condition
+ (c.conc|RatID), # and the random effects of the intercept (RatID) and the slope of concentration
data = data$eth$ctrl,
family = poisson)
# Get a summary of our output
summary(models$eth$avers$overall)
```{r Aversive Responses: Overall Model, eval = T, echo = T, results = "asis"}
```
```{r Aversive Responses: Overall Model, eval = T, echo = T, results = "asis"}
```{r Aversive Responses: Overall Model, eval = T, echo = T, results = "show"}
# Ethanol vs Control (Overall)
## Ethanol Aversives GLMER (with EtOH vs CTRL)####
models$eth$avers$overall <- glmer(Total.Aversive ~ c.conc*Age*Condition # predictors: full factorial fixed effects of centered concentration, age, and condition
+ (c.conc|RatID), # and the random effects of the intercept (RatID) and the slope of concentration
data = data$eth$ctrl,
family = poisson)
# Get a summary of our output
summary(models$eth$avers$overall)
# Ethanol vs Control (Overall)
## Ethanol Aversives GLMER (with EtOH vs CTRL)####
models$eth$avers$overall <- glmer(Total.Aversive ~ c.conc*Age*Condition # predictors: full factorial fixed effects of centered concentration, age, and condition
+ (c.conc|RatID), # and the random effects of the intercept (RatID) and the slope of concentration
data = data$eth$ctrl,
family = poisson)
# Get a summary of our output
summary(models$eth$avers$overall)
